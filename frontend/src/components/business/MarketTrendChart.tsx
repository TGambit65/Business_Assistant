import React, { useState, useEffect } from 'react';
import { PerplexityService } from '../../services/perplexity/PerplexityService';
import { PerplexityRequest } from '../../types/perplexity';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '../ui/card';
import { Alert, AlertDescription, AlertTitle } from '../ui/alert';
import { Loader2, TrendingUp } from 'lucide-react'; // Icons
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

// Initialize the service
const perplexityService = new PerplexityService({});

interface MarketDataPoint {
  month: string;
  A?: number;
  B?: number;
  C?: number;
  // Add more competitors if needed
}

const MarketTrendChart: React.FC = () => {
  const [chartData, setChartData] = useState<MarketDataPoint[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchMarketData = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const request: PerplexityRequest = {
          model: 'pplx-7b-online', // Or a model good at structured data
          messages: [
            { role: 'system', content: 'Provide sample fictional monthly market share percentage data for 3 competitors (Company A, Company B, Company C) over the last 6 months (Jan to Jun). Output ONLY the JSON array, nothing else. Example format: [{"month": "Jan", "Company A": 40, "Company B": 30, "Company C": 30}, ...]' },
            { role: 'user', content: 'Generate sample market share JSON data.' },
          ],
          max_tokens: 300,
          temperature: 0.5, // Lower temperature for more predictable JSON structure
        };
        const response = await perplexityService.getChatCompletion(request);
        const content = response.choices?.[0]?.message?.content || '[]';

        // Attempt to parse the JSON directly from the response
        try {
          // Clean potential markdown code fences
          const cleanedContent = content.replace(/```json\n?|\n?```/g, '').trim();
          const parsedData = JSON.parse(cleanedContent);
          if (Array.isArray(parsedData)) {
             // Basic validation if needed: check if objects have 'month' key etc.
             setChartData(parsedData as MarketDataPoint[]);
          } else {
              throw new Error("Parsed data is not an array.");
          }
        } catch (parseError) {
            console.error("Failed to parse market data JSON:", parseError, "Raw content:", content);
            throw new Error("Failed to parse market data from AI response.");
        }

      } catch (err: any) {
        setError(err.message || 'Failed to fetch market trend data.');
        console.error("Market Trend Fetch Error:", err);
        // Provide mock data on error for UI testing
        setChartData([
            { month: 'Jan', A: 40, B: 30, C: 30 },
            { month: 'Feb', A: 42, B: 28, C: 30 },
            { month: 'Mar', A: 45, B: 25, C: 30 },
            { month: 'Apr', A: 43, B: 27, C: 30 },
            { month: 'May', A: 46, B: 26, C: 28 },
            { month: 'Jun', A: 48, B: 25, C: 27 },
        ]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchMarketData();
  }, []); // Fetch data on component mount

  // Dynamically get competitor names from data keys (excluding 'month')
  const competitorKeys = chartData.length > 0 ? Object.keys(chartData[0]).filter(key => key !== 'month') : ['A', 'B', 'C']; // Fallback keys
  const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#387908', '#ff00ff']; // Colors for lines

  return (
    <Card className=""> {/* Added className */}
      <CardHeader className=""> {/* Added className */}
        <CardTitle className="flex items-center gap-2"> {/* Added className */}
           <TrendingUp className="h-5 w-5 text-muted-foreground" />
           Fictional Market Trends (Sample)
        </CardTitle>
         <CardDescription className=""> {/* Added className */}
           Monthly market share percentage for fictional competitors (Data generated by AI).
         </CardDescription>
      </CardHeader>
      <CardContent className=""> {/* Added className */}
        {isLoading && (
          <div className="flex items-center justify-center h-[300px]"> {/* Set height for loading state */}
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
            <span className="ml-2">Loading chart data...</span>
          </div>
        )}
        {error && !isLoading && ( // Show error only if not loading mock data
          <Alert variant="destructive" className="mt-4"> {/* Added className */}
            <AlertTitle className="">Error Loading Data</AlertTitle> {/* Added className */}
            <AlertDescription className="">{error} Displaying sample data instead.</AlertDescription> {/* Added className */}
          </Alert>
        )}
        {(!isLoading || error) && chartData.length > 0 && ( // Show chart if not loading OR if error occurred (displaying mock data)
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={chartData} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#ccc dark:stroke-gray-700" />
              <XAxis dataKey="month" stroke="#666 dark:stroke-gray-400" fontSize={12} />
              <YAxis stroke="#666 dark:stroke-gray-400" fontSize={12} unit="%" />
              <Tooltip
                contentStyle={{ backgroundColor: 'rgba(255, 255, 255, 0.8)', border: '1px solid #ccc', borderRadius: '4px', fontSize: '12px' }}
                itemStyle={{ color: '#333' }}
              />
              <Legend wrapperStyle={{ fontSize: '12px' }} />
              {competitorKeys.map((key, index) => (
                 <Line
                    key={key}
                    type="monotone"
                    dataKey={key}
                    stroke={colors[index % colors.length]}
                    strokeWidth={2}
                    dot={{ r: 3 }}
                    activeDot={{ r: 6 }}
                 />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </CardContent>
    </Card>
  );
};

export default MarketTrendChart;
