When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at MetricsChart (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/dashboard/MetricsChart.jsx:36:25)

      129 |       const sampleData = generateSampleData(timeRange);
      130 |       setChartData(sampleData);
    > 131 |       setTotalDataPoints(sampleData.length);
          |       ^
      132 |     } finally {
      133 |       setIsLoading(false);
      134 |     }

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setTotalDataPoints (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at src/components/dashboard/MetricsChart.jsx:131:7

    console.error
      Warning: An update to MetricsChart inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at MetricsChart (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/dashboard/MetricsChart.jsx:36:25)

      131 |       setTotalDataPoints(sampleData.length);
      132 |     } finally {
    > 133 |       setIsLoading(false);
          |       ^
      134 |     }
      135 |   }, [timeRange, processMetricsData]);
      136 |   

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setIsLoading (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at src/components/dashboard/MetricsChart.jsx:133:7

    console.error
      Error loading performance data: TypeError: Cannot read properties of undefined (reading 'responseTime')
          at loadPerformanceData (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/dashboard/PerformanceIndicators.jsx:62:44)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)

      68 |         setCategoryData(generateCategoryData());
      69 |       } catch (error) {
    > 70 |         console.error('Error loading performance data:', error);
         |                 ^
      71 |         
      72 |         // Fallback to default data
      73 |         setPerformanceData({

      at loadPerformanceData (src/components/dashboard/PerformanceIndicators.jsx:70:17)

  ● Analytics Dashboard Responsiveness Tests › MetricsChart Component › adjusts chart size based on viewport width

    TestingLibraryElementError: Unable to find an element by: [data-testid="responsive-container"]

    Ignored nodes: comments, script, style
    <body>
      <div>
        <div
          class="h-full flex flex-col"
        >
          <div
            class="flex justify-between items-center mb-4"
          >
            <div
              class="data-[orientation=vertical]:flex-col"
              value="line"
            >
              <div
                class="inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground"
                role="tablist"
              >
                <button
                  class="inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm"
                  role="tab"
                  value="line"
                >
                  Line
                </button>
                <button
                  class="inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm"
                  role="tab"
                  value="area"
                >
                  Area
                </button>
                <button
                  class="inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm"
                  role="tab"
                  value="bar"
                >
                  Bar
                </button>
                <button
                  class="inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm"
                  role="tab"
                  value="user"
                >
                  Users
                </button>
              </div>
            </div>
            <div
              class="flex items-center"
            >
              <span
                class="text-xs text-muted-foreground"
              >
                0
                 data points • Updated 
                11:34:28 AM
              </span>
            </div>
          </div>
          <div
            class="flex-grow"
          >
            <div
              class="w-full h-full flex items-center justify-center"
            >
              Loading...
            </div>
          </div>
        </div>
      </div>
    </body>

      159 |       const { rerender, unmount } = render(<MetricsChart {...mockProps} />);
      160 |       
    > 161 |       expect(screen.getByTestId('responsive-container')).toBeInTheDocument();
          |                     ^
      162 |       unmount();
      163 |       
      164 |       // Tablet

      at Object.getElementError (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/config.js:37:19)
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByTestId (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/tests/analytics/ResponsivenessTests.test.tsx:161:21)

  ● Analytics Dashboard Responsiveness Tests › PerformanceIndicators Component › renders indicators in responsive grid layout

    Cannot update an unmounted root.

      198 |       // Tablet
      199 |       resizeWindow(768, 1024);
    > 200 |       rerender(<PerformanceIndicators {...mockProps} />);
          |       ^
      201 |       expect(screen.getByTestId('pie-chart')).toBeInTheDocument();
      202 |       expect(screen.getByTestId('radial-bar-chart')).toBeInTheDocument();
      203 |       unmount();

      at ReactDOMRoot.Object.<anonymous>.ReactDOMHydrationRoot.render.ReactDOMRoot.render [as render] (node_modules/react-dom/cjs/react-dom.development.js:29328:11)
      at Object.render (node_modules/@testing-library/react/dist/pure.js:122:12)
      at node_modules/@testing-library/react/dist/pure.js:163:12
      at node_modules/@testing-library/react/dist/act-compat.js:64:24
      at act (node_modules/react/cjs/react.development.js:2512:16)
      at actWithWarning (node_modules/react-dom/cjs/react-dom-test-utils.development.js:1740:10)
      at node_modules/@testing-library/react/dist/act-compat.js:63:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:159:26)
      at rerender (node_modules/@testing-library/react/dist/pure.js:178:7)
      at Object.<anonymous> (src/tests/analytics/ResponsivenessTests.test.tsx:200:7)

 FAIL  src/tests/analytics/DataAccuracyTests.test.ts
  ● Console

    console.log
      Loaded 0 API keys from storage

      at KeyVault.loadKeys (src/security/KeyVault.ts:140:13)

  ● Analytics Data Accuracy Tests › Aggregated Data Retrieval › should retrieve data with correct time range and aggregation level

    expect(received).toBe(expected) // Object.is equality

    Expected: 7
    Received: 8

      222 |       
      223 |       // Should have 7 days of data
    > 224 |       expect(result.length).toBe(7);
          |                             ^
      225 |       
      226 |       // Each result should have the correct structure
      227 |       result.forEach(item => {

      at Object.<anonymous> (src/tests/analytics/DataAccuracyTests.test.ts:224:29)

 FAIL  src/components/PWAInstaller/PWAInstaller.test.tsx
  ● Console

    console.error
      Warning: `ReactDOMTestUtils.act` is deprecated in favor of `React.act`. Import `act` from `react` instead of `react-dom/test-utils`. See https://react.dev/warnings/react-dom-test-utils for more info.

       98 |
       99 |   test('should not render install button when not installable', () => {
    > 100 |     render(<PWAInstaller />);
          |           ^
      101 |     
      102 |     // No install button should be visible initially
      103 |     expect(screen.queryByText(/install app/i)).not.toBeInTheDocument();

      at printWarning (node_modules/react-dom/cjs/react-dom-test-utils.development.js:71:30)
      at error (node_modules/react-dom/cjs/react-dom-test-utils.development.js:45:7)
      at actWithWarning (node_modules/react-dom/cjs/react-dom-test-utils.development.js:1736:7)
      at node_modules/@testing-library/react/dist/act-compat.js:63:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:159:26)
      at render (node_modules/@testing-library/react/dist/pure.js:246:10)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:100:11)

    console.error
      Warning: An update to PWAInstaller inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at PWAInstaller (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/PWAInstaller/PWAInstaller.tsx:16:3)

      30 |       e.preventDefault();
      31 |       // Store the event for later use
    > 32 |       setDeferredPrompt(e as BeforeInstallPromptEvent);
         |       ^
      33 |       // Update UI to notify the user they can install the PWA
      34 |       setInstallable(true);
      35 |       

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setDeferredPrompt (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:32:7)
      at callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:338:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3)
      at EventTargetImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9)
      at EventTargetImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17)
      at dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:111:12)

    console.error
      Warning: An update to PWAInstaller inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at PWAInstaller (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/PWAInstaller/PWAInstaller.tsx:16:3)

      32 |       setDeferredPrompt(e as BeforeInstallPromptEvent);
      33 |       // Update UI to notify the user they can install the PWA
    > 34 |       setInstallable(true);
         |       ^
      35 |       
      36 |       console.log('PWA is installable');
      37 |     };

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setInstallable (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:34:7)
      at callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:338:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3)
      at EventTargetImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9)
      at EventTargetImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17)
      at dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:111:12)

    console.log
      PWA is installable

      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:36:15)

    console.log
      PWA is already installed

      at checkAppInstalled (src/components/PWAInstaller/PWAInstaller.tsx:42:17)

    console.error
      Warning: An update to PWAInstaller inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at PWAInstaller (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/PWAInstaller/PWAInstaller.tsx:16:3)

      30 |       e.preventDefault();
      31 |       // Store the event for later use
    > 32 |       setDeferredPrompt(e as BeforeInstallPromptEvent);
         |       ^
      33 |       // Update UI to notify the user they can install the PWA
      34 |       setInstallable(true);
      35 |       

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setDeferredPrompt (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:32:7)
      at callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:338:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3)
      at EventTargetImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9)
      at EventTargetImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17)
      at dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:125:12)

    console.error
      Warning: An update to PWAInstaller inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at PWAInstaller (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/PWAInstaller/PWAInstaller.tsx:16:3)

      32 |       setDeferredPrompt(e as BeforeInstallPromptEvent);
      33 |       // Update UI to notify the user they can install the PWA
    > 34 |       setInstallable(true);
         |       ^
      35 |       
      36 |       console.log('PWA is installable');
      37 |     };

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setInstallable (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:34:7)
      at callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:338:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3)
      at EventTargetImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9)
      at EventTargetImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17)
      at dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:125:12)

    console.log
      PWA is installable

      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:36:15)

    console.error
      Warning: An update to PWAInstaller inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at PWAInstaller (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/PWAInstaller/PWAInstaller.tsx:16:3)

      30 |       e.preventDefault();
      31 |       // Store the event for later use
    > 32 |       setDeferredPrompt(e as BeforeInstallPromptEvent);
         |       ^
      33 |       // Update UI to notify the user they can install the PWA
      34 |       setInstallable(true);
      35 |       

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setDeferredPrompt (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:32:7)
      at callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:338:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3)
      at EventTargetImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9)
      at EventTargetImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17)
      at dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:138:12)

    console.error
      Warning: An update to PWAInstaller inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at PWAInstaller (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/PWAInstaller/PWAInstaller.tsx:16:3)

      32 |       setDeferredPrompt(e as BeforeInstallPromptEvent);
      33 |       // Update UI to notify the user they can install the PWA
    > 34 |       setInstallable(true);
         |       ^
      35 |       
      36 |       console.log('PWA is installable');
      37 |     };

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setInstallable (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:34:7)
      at callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:338:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3)
      at EventTargetImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9)
      at EventTargetImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17)
      at dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:138:12)

    console.log
      PWA is installable

      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:36:15)

    console.error
      Warning: An update to PWAInstaller inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at PWAInstaller (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/PWAInstaller/PWAInstaller.tsx:16:3)

      30 |       e.preventDefault();
      31 |       // Store the event for later use
    > 32 |       setDeferredPrompt(e as BeforeInstallPromptEvent);
         |       ^
      33 |       // Update UI to notify the user they can install the PWA
      34 |       setInstallable(true);
      35 |       

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setDeferredPrompt (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:32:7)
      at callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:338:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3)
      at EventTargetImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9)
      at EventTargetImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17)
      at dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:156:12)

    console.error
      Warning: An update to PWAInstaller inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at PWAInstaller (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/PWAInstaller/PWAInstaller.tsx:16:3)

      32 |       setDeferredPrompt(e as BeforeInstallPromptEvent);
      33 |       // Update UI to notify the user they can install the PWA
    > 34 |       setInstallable(true);
         |       ^
      35 |       
      36 |       console.log('PWA is installable');
      37 |     };

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setInstallable (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:34:7)
      at callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:338:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3)
      at EventTargetImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9)
      at EventTargetImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17)
      at dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:156:12)

    console.log
      PWA is installable

      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:36:15)

    console.error
      Warning: An update to PWAInstaller inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at PWAInstaller (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/PWAInstaller/PWAInstaller.tsx:16:3)

      30 |       e.preventDefault();
      31 |       // Store the event for later use
    > 32 |       setDeferredPrompt(e as BeforeInstallPromptEvent);
         |       ^
      33 |       // Update UI to notify the user they can install the PWA
      34 |       setInstallable(true);
      35 |       

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setDeferredPrompt (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:32:7)
      at callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:338:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3)
      at EventTargetImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9)
      at EventTargetImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17)
      at dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:177:12)

    console.error
      Warning: An update to PWAInstaller inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
          at PWAInstaller (/home/thoder/Desktop/Cursor/email-assistant/frontend/src/components/PWAInstaller/PWAInstaller.tsx:16:3)

      32 |       setDeferredPrompt(e as BeforeInstallPromptEvent);
      33 |       // Update UI to notify the user they can install the PWA
    > 34 |       setInstallable(true);
         |       ^
      35 |       
      36 |       console.log('PWA is installable');
      37 |     };

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom.development.js:27628:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:25547:5)
      at setInstallable (node_modules/react-dom/cjs/react-dom.development.js:16708:7)
      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:34:7)
      at callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:338:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3)
      at EventTargetImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9)
      at EventTargetImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17)
      at dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:177:12)

    console.log
      PWA is installable

      at handleBeforeInstallPrompt (src/components/PWAInstaller/PWAInstaller.tsx:36:15)

  ● PWAInstaller Component › should show install button when installable

    TestingLibraryElementError: Unable to find an element with the text: /install app/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    <body>
      <div />
    </body>

      112 |     
      113 |     // Install button should now be visible
    > 114 |     expect(screen.getByText(/install app/i)).toBeInTheDocument();
          |                   ^
      115 |   });
      116 |
      117 |   test('should not show install button when already installed', () => {

      at Object.getElementError (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/config.js:37:19)
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:114:19)

  ● PWAInstaller Component › should trigger installation flow when button is clicked

    TestingLibraryElementError: Unable to find an element with the text: /install app/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    <body>
      <div />
    </body>

      139 |     
      140 |     // Click the install button
    > 141 |     fireEvent.click(screen.getByText(/install app/i));
          |                            ^
      142 |     
      143 |     await waitFor(() => {
      144 |       expect(event.prompt).toHaveBeenCalled();

      at Object.getElementError (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/config.js:37:19)
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:141:28)

  ● PWAInstaller Component › should handle installation rejection

    TestingLibraryElementError: Unable to find an element with the text: /install app/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    <body>
      <div />
    </body>

      157 |     
      158 |     // Click the install button
    > 159 |     fireEvent.click(screen.getByText(/install app/i));
          |                            ^
      160 |     
      161 |     await waitFor(() => {
      162 |       expect(event.prompt).toHaveBeenCalled();

      at Object.getElementError (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/config.js:37:19)
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/components/PWAInstaller/PWAInstaller.test.tsx:159:28)

  ● PWAInstaller Component › should handle custom children as install button

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

    Ignored nodes: comments, script, style
    <html>
      <head>
        <link
          href="/manifest.json"
          rel="manifest"
        />
      </head>
      <body>
        <div>
          <button>
            Custom Install Button
          </button>
        </div>
      </body>
    </html>

      184 |     
      185 |     await waitFor(() => {
    > 186 |       expect(event.prompt).toHaveBeenCalled();
          |                            ^
      187 |     });
      188 |   });
      189 | }); 

      at src/components/PWAInstaller/PWAInstaller.test.tsx:186:28
      at runWithExpensiveErrorDiagnosticsDisabled (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/config.js:47:12)
      at checkCallback (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/wait-for.js:127:77)
      at checkRealTimersCallback (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/wait-for.js:121:16)
      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:516:19)

 FAIL  src/App.test.js
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /home/thoder/Desktop/Cursor/email-assistant/frontend/node_modules/date-fns/locale/en-US.js:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { formatDistance } from "./en-US/_lib/formatDistance.js";
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      1 | import React from "react";
    > 2 | import { DayPicker } from "react-day-picker";
        | ^
      3 | import { ChevronLeft, ChevronRight } from "lucide-react";
      4 | import { cn } from "../../lib/utils";
      5 |

      at Runtime.createScriptFromCode (node_modules/react-scripts/node_modules/jest-runtime/build/index.js:1728:14)
      at Object.<anonymous> (node_modules/react-day-picker/src/classes/DateLib.ts:43:1)
      at Object.<anonymous> (node_modules/react-day-picker/src/DayPicker.tsx:6:1)
      at Object.<anonymous> (node_modules/react-day-picker/src/index.ts:1:1)
      at Object.<anonymous> (src/components/ui/calendar.jsx:2:1)
      at Object.<anonymous> (src/components/email/EmailScheduler.jsx:7:1)
      at Object.<anonymous> (src/pages/email/ComposePage.jsx:12:1)
      at Object.<anonymous> (src/App.js:13:1)
      at Object.<anonymous> (src/App.test.js:2:1)

Test Suites: 4 failed, 4 total
Tests:       7 failed, 11 passed, 18 total
Snapshots:   0 total
Time:        4.023 s
Ran all test suites.
